//
// Copyright (C) 2024 Harshit Jain <dev-harsh1998@hotmail.com>
//
// SPDX-License-Identifier: Apache-2.0
//
/// We implement the IHwControl trait for the HwControl struct.
/// The HwControl struct is the service implementation.
/// The IHwControl trait is generated by AIDL.
use custom_hardware_hwcontrol::aidl::custom::hardware::hwcontrol::{
    IHwControl::IHwControl, HwType::HwType,
};

use log::{error, info};
mod keyboard;
mod pen;
mod dt2w;
mod sysfs;
mod err_mgr;

pub struct HwControl;

impl binder::Interface for HwControl {}

impl IHwControl for HwControl {
    fn setHwState(&self, hw: HwType, enable: i32) -> binder::Result<()> {
        // convert the i32 to a bool
        let enable = enable != 0;

        let result = match hw {
            HwType::TAP2WAKE => dt2w::set_tap_to_wake(enable),
            HwType::KEYBOARD => keyboard::set_keyboard(enable),
            HwType::STYLUS => pen::set_pen(enable),
            _ => {
                error!("Invalid hardware type");
                Err(false)
            }
        };

        match result {
            Ok(_) => Ok(()),
            Err(_) => {
                error!("Failed to set hardware state");
                Err(binder::StatusCode::INVALID_OPERATION.into())
            }
        }
    }

    fn getHwState(&self, _hw: HwType) -> binder::Result<i32> {
        let result = match _hw {
            HwType::TAP2WAKE => dt2w::get_tap_to_wake(),
            HwType::KEYBOARD => keyboard::get_keyboard(),
            HwType::STYLUS => pen::get_pen(),
            _ => {
                error!("Invalid hardware type");
                Err(false)
            }
        };

        match result {
            Ok(state) => {
                info!("Hardware state: {}", state);
                Ok(if state { 1 } else { 0 })
            }
            Err(_) => {
                error!("Failed to get hardware state");
                Err(binder::StatusCode::BAD_TYPE.into())
            }
        }
    }
}